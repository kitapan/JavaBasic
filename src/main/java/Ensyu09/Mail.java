package Ensyu09;

// メールサービスを表すインターフェース。sendメソッドを持つ
public interface Mail {
  // メッセージを送信するためのメソッド。実装クラスで定義される
  public String send(String message);
}
/*
インターフェースのメリット:
1. 抽象化の促進:
   - インターフェースを使用することで、具体的な実装から独立した抽象的な操作を定義できます。これにより、コードの再利用性と柔軟性が向上します。
2. 多重継承をサポート:
   - Javaではクラスの多重継承はサポートされていませんが、インターフェースを使うことで多重継承のような機能を実現できます。クラスは複数のインターフェースを実装できるため、異なる機能を組み合わせることが可能です。
3. コードの分離:
   - インターフェースを使用することで、実装とインターフェースを分離できます。これにより、インターフェースを通じて相互作用する部分と具体的な実装部分を分けることができ、コードの保守性が向上します。
4. テストの容易さ:
   - インターフェースを使用することで、モックオブジェクトを簡単に作成でき、ユニットテストが容易になります。実装の詳細に依存せずにインターフェースを使用してテストを行うことができます。
5. 設計の柔軟性:
   - インターフェースを使用することで、将来の拡張や変更が容易になります。新しい機能を追加したい場合や既存の機能を変更したい場合でも、インターフェースを通じてコードを簡単に変更できます。
*/

